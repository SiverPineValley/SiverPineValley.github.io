{"componentChunkName":"component---src-templates-blog-post-js","path":"/kafka/kafka_4_1/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"13f81316-9ca0-5714-a060-4451fc6173a5","excerpt":"Kafka CLI…","html":"<ul>\n<li><strong>Kafka CLI</strong>: 카프카를 운영할 때 가장 많이 접하는 도구로, 카프카 브로커 운영에 필요한 다양한 명령을 내릴 수 있다. 카프카 클라이언트 애플리케이션을 운영할 때는 카프카 클러스터와 연동하여 데이터를 주고받는 것도 중요하지만 토픽이나 파티션 변경과 같은 명령을 실행할 경우도 많이 발생한다. 그렇기 때문에 카프카 커맨드 라인 툴과 각 툴별 옵션에 대해서도 알고 있어야 한다.</li>\n<li><code class=\"language-text\">zookeeper</code> 실행</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">bin/zookeeper-server-start.sh config/zookeeper.properties</code></pre></div>\n<ul>\n<li>Kafka Broker 실행</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">bin/kafka-server-start.sh config/server.properties</code></pre></div>\n<ul>\n<li>Kafka Broker API Version 체크</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092</code></pre></div>\n<ul>\n<li>Kafka 생성 토픽 확인</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">bin/kafka-topics.sh --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--list</span></code></pre></div>\n</br>\n<h2>4-1-1) kafka-topics.sh</h2>\n<ul>\n<li>토픽을 생성하기 위해서는 <code class=\"language-text\">Kafka 클러스터 정보</code>와 <code class=\"language-text\">토픽 이름</code>을 알고 있어야 한다. 두 값은 토픽을 만들기 위한 필수 값이다. 이렇게 만들어진 토픽은 파티션 개수, 복제 개수 등과 같은 다양한 옵션이 포함되어 있지만 모두 브로커의 기본값으로 생성된다.</li>\n<li>토픽의 설정을 변경하는 것은 가능하나, partition 개수를 줄이는 것은 불가능하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token comment\"># Kafka 토픽 생성 (--create)</span>\n./kafka-topics.sh <span class=\"token parameter variable\">--create</span> <span class=\"token punctuation\">\\</span>\n--bootstrap-server my-kafka:9092 <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--partitions</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">\\</span>\n--replication-factor <span class=\"token number\">1</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--config</span> <span class=\"token assign-left variable\">retention.ms</span><span class=\"token operator\">=</span><span class=\"token number\">172800000</span>\n<span class=\"token parameter variable\">--topic</span> hello.kafka\n\n<span class=\"token comment\"># Kafka 토픽 설명 (--describe)</span>\n./kafka-topics.sh --bootstrap-server my-kafka:9092 <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--topic</span> hello.kafka\n<span class=\"token parameter variable\">--describe</span>\n\n<span class=\"token comment\"># Kafka 토픽 옵션 변경 (--alter)</span>\n./kafka-topics.sh --bootstrap-server my-kafka:9092 <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--topic</span> hello.kafka\n<span class=\"token parameter variable\">--alter</span> <span class=\"token parameter variable\">--partitions</span> <span class=\"token number\">12</span>\n\n<span class=\"token comment\"># Kafka 토픽 삭제</span>\n./kafka-topics.sh <span class=\"token parameter variable\">--delete</span> <span class=\"token punctuation\">\\</span>\n--bootstrap-server my-kafka:9092 <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--topic</span> hello.kafka <span class=\"token punctuation\">\\</span>\n--if-exists</code></pre></div>\n</br>\n<h2>4-1-2) kafka-configs.sh</h2>\n<ul>\n<li>토픽에 일부 옵션을 설정하기 위해서는 <code class=\"language-text\">kafka-configs.sh</code> 명령어를 사용해야 한다. <code class=\"language-text\">--alter</code>과 <code class=\"language-text\">-add-config</code> 옵션을 사용하여 <code class=\"language-text\">min.insync.replicas</code> 옵션을 토픽별로 설정할 수 있다.</li>\n<li>브로커에 설정된 각종 기본 값은 <code class=\"language-text\">--broker</code>, <code class=\"language-text\">--all</code>, <code class=\"language-text\">--describe</code> 옵션을 사용하여 조회할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token comment\"># Kafka 옵션 변경 (min.insync.replicas)</span>\n./kafka-configs.sh --bootstrap-server my-kafka:9092 <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--alter</span> <span class=\"token punctuation\">\\</span>\n--add-config <span class=\"token assign-left variable\">min.insync.replicas</span><span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--topic</span> hello.kafka\n\n<span class=\"token comment\"># Kafka 브로커에 설정된 옵션 조회</span>\n./kafka-configs.sh --bootstrap-server my-kafka:9092 <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--broker</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--all</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--describe</span> </code></pre></div>\n</br>\n<h2>4-1-3) kafka-console-producer.sh</h2>\n<ul>\n<li>토픽에 데이터를 produce할 때 사용하는 스크립트로, 실행하면 텍스트를 입력할 수 있고 입력 후 엔터를 누르면 별 다른 메시지 없이 produce된다. produce된 메시지는 vlaue 값으로 전달된다. 이 때 메시지 키는 null로 전송된다.</li>\n<li>메시지 키를 가지는 레코드를 전송하기 위해서는 몇 가지 추가 옵션을 작성해야 한다. key.seperator를 선언하지 않으면 기본 설정은 Tab delimiter(\\t) 이므로 key.seperator를 선언하지 않고 메시지를 보내려면 메시지 키를 작성하고 탭 키를 누른 다음 메시지를 작성하고 엔터를 누른다. 여기서는 명시적으로 구분하기 위해 콜론(:)으로 구분하였다. 메시지 키를 전송하지 않는 경우에는 각 파티션에 라운드 로빈 방식으로 전달되지만 메시지 키를 같이 전달하면 키의 해시값을 작성하여 존재하는 파티션 중 하나에 들어간다. 따라서 동일 키를 가진 메시지들은 같은 파티션으로 들어간다. 이 때 동일 키를 가진 메시지들은 순서가 보장된 형태가 된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token comment\"># 메시지만 Produce</span>\n./kafka-console-producer.sh --bootstrap-server my-kafka:9092 <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--topic</span> hello.kafka\n<span class=\"token operator\">></span>hello\n<span class=\"token operator\">></span>kafka \n\n<span class=\"token comment\"># Key 값도 Produce</span>\n./kafka-console-producer.sh --bootstrap-server my-kafka:9092 <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--topic</span> hello.kafka <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--property</span> <span class=\"token string\">\"parse.key=true\"</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--property</span> <span class=\"token string\">\"key.separator=:\"</span>\n<span class=\"token operator\">></span>key1:no1\n<span class=\"token operator\">></span>key2:no2\n<span class=\"token operator\">></span>key3:no3</code></pre></div>\n</br>\n<h2>4-1-4) kafka-console-consumer.sh</h2>\n<ul>\n<li>토픽의 데이터를 consume할 때 사용한다. <code class=\"language-text\">--from-beginning</code> 옵션은 토픽의 첫 번째 데이터부터 출력한다.</li>\n<li>Producer와 마찬가지로 key를 표시하기 위해서는 <code class=\"language-text\">print.key=true</code>, <code class=\"language-text\">key.separator</code> 옵션을 같이 사용해야 한다.</li>\n<li><code class=\"language-text\">--max-messages</code> 옵션은 최대 컨슘 메시지를 설정할 수 있다.</li>\n<li><code class=\"language-text\">--partiion</code> 옵션은 특정 파티션만 컨슘할 수 있다.</li>\n<li><code class=\"language-text\">--group</code> 옵션은 컨슈머 그룹을 기반으로 동작한다. 컨슈머 그룹이란 특정 목적을 가진 컨슈머들을 묶음으로 사용하는 것을 말한다. 컨슈머 그룹으로 토픽의 레코드를 가져갈 경우 어느 레코드 까지 가졌는지(offset) 브로커에 저장된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token comment\"># 메시지 Consume</span>\n./kafka-console-consumer.sh --bootstrap-server my-kafka:9092 <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--topic</span> hello.kafka <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--property</span> <span class=\"token string\">\"print.key=true\"</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--property</span> <span class=\"token string\">\"key.separator=:\"</span> <span class=\"token punctuation\">\\</span>\n--from-beginning\n\n<span class=\"token comment\"># Consumer 그룹 사용</span>\n./kafka-console-consumer.sh --bootstrap-server my-kafka:9092 <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--topic</span> hello.kafka <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--group</span> hello-group <span class=\"token punctuation\">\\</span>\n--from-beginning</code></pre></div>\n</br>\n<h2>4-1-5) kafka-console-groups.sh</h2>\n<ul>\n<li><code class=\"language-text\">--describe</code> 옵션을 사용하면 해당 컨슈머 그룹이 어떤 토픽을 대상으로 레코드를 가져갔는지, 파티션 별 현재 오프셋, 마지막 레코드의 오프셋, 컨슈머 랙, 컨슈머 ID, 호스트 정보를 알 수 있다.</li>\n<li><code class=\"language-text\">컨슈머 랙</code> 이란 마지막 레코드 오프셋과 현재 오프셋의 차이이다.</li>\n<li>컨슈머 그룹의 offset 리셋에는 다음과 같은 옵션들이 있다.\n<ul>\n<li><code class=\"language-text\">--to-earliest</code>: 가장 처음 오프셋으로 리셋</li>\n<li><code class=\"language-text\">--to-latest</code>: 가장 마지막 오프셋으로 리셋</li>\n<li><code class=\"language-text\">--to-current</code>: 현 시점 기준 오프셋으로 리셋</li>\n<li><code class=\"language-text\">--to-datetime {YYYY-MM-DDTHH:mm:SS.sss}</code>: 특정 시점으로 오프셋 리셋 (레코드 타임스탬프 기준)</li>\n<li><code class=\"language-text\">--to-offset {long}</code>: 특정 오프셋으로 리셋</li>\n<li><code class=\"language-text\">--shift-by {+/- long}</code>: 현재 컨슈머 오프셋에서 앞뒤로 옮기며 리셋</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token comment\"># Consumer Group 리스트</span>\n./kafka-consumer-groups.sh --bootstrap-server my-kafka:9092 <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--list</span>\n\n<span class=\"token comment\"># Consumer Group 상세 정보</span>\n./kafka-consumer-groups.sh --bootstrap-server my-kafka:9092 <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--group</span> <span class=\"token punctuation\">{</span>group 명<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--describe</span>\n\n<span class=\"token comment\"># Offset 리셋 (group - topic의 오프셋을 맨 처음 레코드의 오프셋으로 되돌림)</span>\n./kafka-consumer-groups.sh --bootstrap-server my-kafka:9092 <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--group</span> <span class=\"token punctuation\">{</span>group 명<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--topic</span> <span class=\"token punctuation\">{</span>topic 명<span class=\"token punctuation\">}</span>\n--reset-offsets --to-earliest <span class=\"token parameter variable\">--execute</span></code></pre></div>\n</br>\n<h2>4-1-6) kafka-producer-perf-test.sh</h2>\n<ul>\n<li>kafka producer로 성능을 측정할 때 사용한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">./kafka-producer-perf-test.sh --producer-props <span class=\"token punctuation\">\\</span>\n--bootstrap-servers my-kafka:9092 <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--topic</span> <span class=\"token punctuation\">{</span>topic 명<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">\\</span>\n--num-records <span class=\"token number\">10</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--throughput</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">\\</span>\n--record-size <span class=\"token number\">100</span> <span class=\"token punctuation\">\\</span>\n--print-metric</code></pre></div>\n</br>\n<h2>4-1-7) kafka-reassign-partitions.sh</h2>\n<ul>\n<li>리더 파티션이 특정 브로커에 몰리는 현상을 해소하기 위해 파티션을 분산해서 운영할 때 사용.</li>\n<li>Kafka 브로커에는 <code class=\"language-text\">auto.leader. rebalance.enable</code> 옵션이 있는데 이 기본 값은 true로써 클라이언트 단위에서 리더 파티션을 자동 리밸런스하도록 도와준다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ <span class=\"token function\">cat</span> partition.json\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"partitions\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token string\">\"topic\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"hello.kafka\"</span>, <span class=\"token string\">\"partition\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>, <span class=\"token string\">\"replicas\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">]</span>, <span class=\"token string\">\"version\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n\n./kafka-reassign-partitions.sh <span class=\"token parameter variable\">--zookeeper</span> my-kafka:2181 <span class=\"token punctuation\">\\</span>\n--reassignment-json-file partitions.json <span class=\"token parameter variable\">--execute</span></code></pre></div>\n</br>\n<h2>4-1-8) kafka-delete-records.sh</h2>\n<ul>\n<li>특정 파티션의 특정 offset까지의 모든 레코드를 지울 때 사용.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ <span class=\"token function\">cat</span> delete.json\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"partitions\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token string\">\"topic\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"hello.kafka\"</span>, <span class=\"token string\">\"partition\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>, <span class=\"token string\">\"offset\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">5</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">]</span>, <span class=\"token string\">\"version\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n\n./kafka-delete-records.sh --bootstrap-server my-kafka:9092 <span class=\"token punctuation\">\\</span>\n--offset-json-file delete.json</code></pre></div>\n</br>\n</br>\n<h2>4-1-9) kafka-dump-log.sh</h2>\n<ul>\n<li>Kafka의 파일 단위로 Dump된 로그를 확인하기 위해 사용하는 명령어.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">./kafka-dump-log.sh <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--files</span> data/hello.kafka-0/00000000000000000000.log <span class=\"token punctuation\">\\</span>\n--deep-iteration</code></pre></div>","frontmatter":{"title":"4-1) 카프카 CLI 툴 소개","date":"December 23, 2024","description":null}},"previous":{"fields":{"slug":"/kafka/kafka_3_3/"},"frontmatter":{"title":"3-3) Saas형 Apache Kafka 장점과 단점"}},"next":{"fields":{"slug":"/kafka/kafka_4_2/"},"frontmatter":{"title":"4-2) 토픽을 생성하는 두 가지 방법"}}},"pageContext":{"id":"13f81316-9ca0-5714-a060-4451fc6173a5","previousPostId":"0068b74c-514f-5852-bd70-7b1eb45b14fd","nextPostId":"bbbb8e7d-3c4e-5e19-b66b-269dfd5339c7"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}