{"componentChunkName":"component---src-templates-blog-post-js","path":"/코테/programmers_stack,queue/","result":{"data":{"site":{"siteMetadata":{"title":"Devlog"}},"markdownRemark":{"id":"adc019c6-8ff3-57e1-85b3-5e5d9d41a3e7","excerpt":"[Level 2] 기능 개발 기능 개발은 순차적으로 배포 가능한 기능들의 완료 시점을 계산하여 특정 일에 몇 개의 기능을 배포할 수 있는지 계산하는 문제였다. 문제 자체는 매우 쉬우나, 테스트 케이스 1…","html":"<h2>[Level 2] 기능 개발</h2>\n<p>기능 개발은 순차적으로 배포 가능한 기능들의 완료 시점을 계산하여 특정 일에 몇 개의 기능을 배포할 수 있는지 계산하는 문제였다. 문제 자체는 매우 쉬우나, 테스트 케이스 11번에서 함정이 있다. 배포 가능 기간을 계산하는 공식 중 <code class=\"language-text\">(100 - 30) / 30</code>과 같이 특정 케이스에서 결과가 2.XXXXX와 같은 값으로 나오는 경우가 있다. 이런 경우를 방지하기 위해 나머지가 생기는 경우에는 +1을 해주도록 하였다.</p>\n</br>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">#include &lt;string&gt;\n#include &lt;queue&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nvector&lt;int&gt; solution(vector&lt;int&gt; progresses, vector&lt;int&gt; speeds) {\n    vector&lt;int&gt; answer;\n    queue&lt;int&gt; q;\n    int size = progresses.size();\n    \n    // 큐에 담기\n    for (int i = 0; i &lt; size; i++) {\n        if ((100-progresses[i]) % speeds[i] != 0) {\n            q.push(((100 - progresses[i]) / speeds[i]) + 1);\n            continue;\n        }\n        q.push((100 - progresses[i]) / speeds[i]);\n    }\n    \n    // 하나씩 뽑기\n    int now = 0;\n    int job = 0;\n    while(!q.empty()) {\n        int f = q.front();\n        q.pop();\n        \n        if (now == 0) {\n            now = f;\n            job++;\n        } else if (now &lt; f) {\n            answer.push_back(job);\n            job = 1;\n            now = f;\n        } else {\n            job++;\n        }\n    }\n    \n    if (job != 0) {\n        answer.push_back(job);        \n    }\n\n    return answer;\n}</code></pre></div>\n<h2>[LEVEL 2] 프린터</h2>\n<p>프린터는 출력 우선순위에 따라 출력하는 순서를 정해 초기에 특정 location에 있던 출력물이 언제 출력되는지를 결과로 리턴하는 문제이다. 데이터 수가 많지 않아 그냥 O(n^2)으로 코드를 짰다. 주요 고려해야할 사항으로는 location의 변화를 기록해야 하고, max의 변화를 수시로 체크해야 하는 정도였다.</p>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">#include &lt;string&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nstruct Wait {\n    int priority;\n    bool loc;\n};\n\nint solution(vector&lt;int&gt; priorities, int location) {\n    int answer = 0;\n    int size = priorities.size();\n    int max = -1;\n    vector&lt;Wait&gt; v;\n    \n    for(int i = 0; i &lt; size; i++) {\n        v.push_back(Wait{priorities[i], i == location});\n        if (max &lt; priorities[i]) {\n            max = priorities[i];\n        }\n    }\n    \n    while(!v.empty()) {\n        Wait f = v.front();\n        v.erase(v.begin());\n        if (f.priority &lt; max) {\n            v.push_back(Wait{f.priority, f.loc});\n        } else {\n            answer++;\n            if (f.loc) {\n                break;\n            }\n            \n            max = -1;\n            for(auto iter = v.begin(); iter != v.end(); iter++) {\n                if (iter-&gt;priority &gt; max) {\n                    max = iter-&gt;priority;\n                }\n            }\n        }\n    }\n    \n    return answer;\n}</code></pre></div>\n<h2>[LEVEL 2] 다리를 지나는 트럭</h2>\n<p>다리를 지나는 트럭 문제는 여러 댓수의 트럭이 다리를 지날 때 다리의 길이와 최대 적재 중량을 고려하여 언제 모든 트럭이 다리를 지날 수 있을지 구하는 문제이다. 알고리즘 유형은 시뮬레이션에 가깝다. 그러다보니 구현하기가 좀 어려운 편이였다. 테스트 케이스 중에 4,5,6,9번만 계속 실패했었는데, 나와 비슷하게 실패한 분들의 도움으로 원인을 알 수 있었다. <code class=\"language-text\">5, 5, [2,2,2,2,1,1,1,1,1], 19</code> 로 테스트 케이스를 돌려보면 11 -> 12초로 갈 때 지나가던 무게 2 차량이 빠지고 1차량이 하나 추가되는데, 진입하는 차량을 먼저 넣고 <code class=\"language-text\">continue</code> 되다보니, 빠져나가는 차량이 고려되지 않아 한번 빠져나가고 12초에 한번 더 진입하면서 문제가 발생하였다. 즉, 직전에 한 번 빠져나가고, 두번이 연속으로 들어올 때 고려하지 못한 케이스가 있던 것 이었다.</p>\n<p>기존 코드가 맘에 들진 않지만 다 뒤집어 엎고 다시 짜기에는 너무 오래걸릴 것 같아서... 그냥 기존 코드에 내용을 추가하여 해결할 수 있었다. 위와 같은 함정 때문인지 체감 난이도는 LEVEL 3였다고 생각한다.</p>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n\nusing namespace std;\n\nstruct Prog {\n    int weight;\n    int time;\n};\n\nint solution(int bridge_length, int weight, vector&lt;int&gt; truck_weights) {\n    int time = 0;\n    int size = truck_weights.size();\n    int on_bridge = 0;\n    queue&lt;Prog&gt; q;\n    bool prev_out = false;\n\n    while(!truck_weights.empty() || !q.empty()) {\n        if (!truck_weights.empty()) {\n            int f = truck_weights.front();\n            // 다리에 더 들어갈 수 있을 때\n            if (on_bridge + f &lt;= weight) {\n                if (!prev_out) {\n                    time++;\n                }\n                q.push(Prog{f, time});\n                truck_weights.erase(truck_weights.begin());\n                on_bridge += f;\n                prev_out = false;\n                \n                if (!q.empty()) {\n                    Prog o = q.front();\n                    if (bridge_length - (time - o.time) != 1) {\n                        continue;\n                    }\n                }\n                else continue;\n            }\n        }\n        Prog o = q.front();\n        time += bridge_length - (time - o.time);\n        on_bridge -= o.weight;\n        q.pop();\n        prev_out = true;\n    }\n    \n    return time;\n}</code></pre></div>\n<h2>[LEVEL 2] 주식 가격</h2>\n<p>이전의 다리를 지나는 트럭 문제가 엄청 고생시킨 문제였다면, 이 문제는 엄청 간단했다. 각 주식 시간대별 가격이 얼마나 떨어지지 않느냐를 구하는 문제였다. 왜 스택/큐 문제인지는 모르겠으나, O(n^2)으로 해도 시간 안에 해결 가능한 문제라 그냥 간단하게 구현했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">#include &lt;string&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nvector&lt;int&gt; solution(vector&lt;int&gt; prices) {\n    vector&lt;int&gt; answer;\n    int size = prices.size();\n    \n    for(int i = 0; i &lt; size; i++) {\n        int time = 0;\n        for(int j = i + 1; j &lt; size; j++) {\n            if (prices[i] &lt;= prices[j]) {\n                time++;\n                continue;\n            }\n            time++;\n            break;\n        }\n        answer.push_back(time);\n    }\n    \n    return answer;\n}</code></pre></div>","frontmatter":{"title":"[프로그래머스 연습문제] 스택, 큐","date":"July 02, 2022","description":null}},"previous":{"fields":{"slug":"/코테/programmers_dynamic/"},"frontmatter":{"title":"[프로그래머스 연습문제] Dynamic Programming"}},"next":{"fields":{"slug":"/Golang/concurrency_in_go_1/"},"frontmatter":{"title":"[Go 동시성 프로그래밍] 01. 동시성 소개, 코드 모델링: 순차적인 프로세스 간의 통신"}}},"pageContext":{"id":"adc019c6-8ff3-57e1-85b3-5e5d9d41a3e7","previousPostId":"c2f67194-16ae-5904-9549-4d7c109e9b04","nextPostId":"2c57043c-6b6a-5522-bfa0-27d1259f4a83"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}