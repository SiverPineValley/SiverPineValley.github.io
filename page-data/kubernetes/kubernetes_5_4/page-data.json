{"componentChunkName":"component---src-templates-blog-post-js","path":"/kubernetes/kubernetes_5_4/","result":{"data":{"site":{"siteMetadata":{"title":"Devlog"}},"markdownRemark":{"id":"5aa500d8-a92d-5f0f-8ba5-0e20fecdaf74","excerpt":"5.5 데몬셋 데몬셋(DaemonSet)은 레플리카셋의 특수한 형태라고 할 수 있는 리소스이다. 레플리카셋은 각 쿠버네티스 노드에 총 N…","html":"<h1>5.5 데몬셋</h1>\n<p>데몬셋(DaemonSet)은 레플리카셋의 특수한 형태라고 할 수 있는 리소스이다. 레플리카셋은 각 쿠버네티스 노드에 총 N개의 파드를 노드의 리소스 상황에 맞게 배치한다. 그래서 각 노드의 파드 수가 동일하다고 할 수 없으며, 모든 노드에 반드시 배치된다고도 할 수 없다. 그러나 대몬셋은 각 노드에 파드를 하나씩 배치하는 리소스이다. 따라서 데몬셋은 레플리카 수를 지정할 수 없고 하나의 노드에 두 개의 파드를 배치할 수도 없다. 쿠버네티스 노드를 늘렸을 때에도 데몬셋의 파드는 자동으로 늘어난 노드에서 기동한다. 따라서 데몬셋은 각 파드가 출력하는 로그를 호스트 단위로 수집하는 플루언트디(Fluentd)나, 각 파드 리소스 사용 현황 및 노드 상태를 모니터링하는 데이터독(Datadog)등 모든 노드에서 반드시 동작해야 하는 프로세스를 위해 사용하는 것이 유용하다.</p>\n<h2>5.5.1 데몬셋 생성</h2>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> DaemonSet\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> sample<span class=\"token punctuation\">-</span>ds\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> sample<span class=\"token punctuation\">-</span>app\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> sample<span class=\"token punctuation\">-</span>app\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>container\n          <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span><span class=\"token number\">1.16</span>\n          <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token comment\"># 데몬셋 생성</span>\n$ kubectl apply <span class=\"token parameter variable\">-f</span> sample-ds.yaml\ndaemonset.apps/sample-ds created\n\n$ kubectl get pods <span class=\"token parameter variable\">-o</span> wide\nNAME                                 READY   STATUS    RESTARTS       AGE   IP            NODE                   NOMINATED NODE   READINESS GATES\nsample-ds-bfjcl                      <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>              18s   <span class=\"token number\">10.244</span>.1.12   kind-cluster-worker2   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nsample-ds-hfxsm                      <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>              18s   <span class=\"token number\">10.244</span>.3.13   kind-cluster-worker    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nsample-ds-v57kf                      <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>              18s   <span class=\"token number\">10.244</span>.2.13   kind-cluster-worker3   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span></code></pre></div>\n<h2>5.5.2  데몬셋 업데이트 전략</h2>\n<p>디플로이먼트와 마찬가지로, 데몬셋 업데이트에서도 두 가지 업데이트 전략 중 하나를 선택할 수 있다.</p>\n<table>\n<thead>\n<tr>\n<th>업데이트 전략</th>\n<th>내용</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">OnDelete</code></td>\n<td>데몬셋 매니페스트가 변경되었을 때 파드를 업데이트하지 않고 다른 이유로 파드가 다시 생성될 때 새로운 정의로 파드를 생성한다.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">RollingUpdate</code></td>\n<td>디플로이먼트와 마찬가지로 파드를 업데이트</td>\n</tr>\n</tbody>\n</table>\n<h3>OnDelete</h3>\n<p><code class=\"language-text\">OnDelete</code>에서는 데몬셋 매니페스트를 수정하여 이미지 등을 변경하였더라도 기존 파드는 업데이트 되지 않는다. 디플로이먼트와 달리 데몬셋은 모니터링이나 로그 전송과 같은 용도로 많이 사용되기 때문에, 업데이트는 다음 번에 다시 생성할 때나 수동으로 임의의 시점에 하게 되어 있다. 또한, <code class=\"language-text\">type</code> 외에 지정할 수 있는 항목은 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> DaemonSet\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> sample<span class=\"token punctuation\">-</span>ds<span class=\"token punctuation\">-</span>ondelete\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">updateStrategy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> OnDelete\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> sample<span class=\"token punctuation\">-</span>app\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> sample<span class=\"token punctuation\">-</span>app\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>container\n          <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span><span class=\"token number\">1.16</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token comment\"># 데몬셋 생성</span>\n$ kubectl apply <span class=\"token parameter variable\">-f</span> sample-ds-ondelete.yaml\ndaemonset.apps/sample-ds-ondelete created\n\n$ kubectl get pods <span class=\"token parameter variable\">-o</span> wide\nNAME                                 READY   STATUS    RESTARTS       AGE   IP            NODE                   NOMINATED NODE   READINESS GATES\nsample-ds-ondelete-2hnvb             <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>              12s     <span class=\"token number\">10.244</span>.1.13   kind-cluster-worker2   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nsample-ds-ondelete-65jvc             <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>              12s     <span class=\"token number\">10.244</span>.3.14   kind-cluster-worker    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nsample-ds-ondelete-8zf5s             <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>              12s     <span class=\"token number\">10.244</span>.2.14   kind-cluster-worker3   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\n\n<span class=\"token comment\"># 하나의 파드만 삭제하여 다시 생성</span>\n$ kubectl delete pod sample-ds-ondelete-2hnvb\npod <span class=\"token string\">\"sample-ds-ondelete-2hnvb\"</span> deleted\n\n$ kubectl get pods <span class=\"token parameter variable\">-o</span> wide\nNAME                                 READY   STATUS    RESTARTS       AGE    IP            NODE                   NOMINATED NODE   READINESS GATES\nsample-ds-ondelete-65jvc             <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>              79s    <span class=\"token number\">10.244</span>.3.14   kind-cluster-worker    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nsample-ds-ondelete-84d27             <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>              2s     <span class=\"token number\">10.244</span>.1.14   kind-cluster-worker2   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nsample-ds-ondelete-8zf5s             <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>              79s    <span class=\"token number\">10.244</span>.2.14   kind-cluster-worker3   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span></code></pre></div>\n<h3>RollingUpdate</h3>\n<p>데몬셋도 디플로이먼트와 마찬가지로 <code class=\"language-text\">RollingUpdate</code>를 사용한 업데이트가 가능하다. 그러나 데몬셋에서는 하나의 노드에 하나의 파드만 가지므로, 디플로이먼트와 달리 동시에 생성할 수 있는 최대 파드 수(<code class=\"language-text\">maxSurge</code>)를 설정할 수 없다. 동시에 정지 가능한 최대 파드 수(<code class=\"language-text\">maxUnavailable</code>)만 지정할 수 있다. 이 기본값은 1이며 0으로 지정할 수 없다.</p>\n<h1>5.6 스테이트풀셋</h1>\n<p>스테이트풀셋(statefulSet)도 데몬셋과 마찬가지로 레플리카셋의 특수한 형태라고 할 수 있다. 이름 그대로 데이터베이스 등과 같은 스테이풀한 워크로드에 사용하기 위한 리소스이다. 레플리카셋과 주요 차이점으 다음과 같다.</p>\n<ul>\n<li>생성되는 파드명의 접미사는 숫자 인덱스가 부여된 것이다. (sample-statefulset-0, sample-statefulset-1, ...)</li>\n<li>파드명이 바뀌자 않는다.</li>\n<li>데이터를 영구적으로 저장하기 위한 구조로 되어 있다.</li>\n<li>이후 설명할 영구 볼륨(PersistentVolume)을 사용하는 경우에는 파드를 재기동할 때 같은 디스크를 사용하여 다시 생성한다.</li>\n</ul>\n<h2>5.6.1 스테이트풀셋 생성</h2>\n<p>아래 예제 매니페스트는 스테이트풀셋을 생성하는 예제이다. 스테이트풀셋에서는 <code class=\"language-text\">spec.volumeClaimTemplates</code>를 지정하여 스테이트풀셋으로 생성되는 각 파드에 영구 볼륨 클레임을 설정할 수 있다. 영구 볼륨 클레임을 사용하면 클러스터 외부의 네트워크를 통해 제공되는 영구 볼륨을 파드에 연갈할 수 있으므로, 파드를 재기동할 때나 다른 노드로 이동할 때 같은 데이터를 보유한 상태로 컨테이너가 다시 생성된다. 영구 볼륨은 하나의 파드가 소유할 수도 있고, 영구 볼륨 종류에 따라 여러 파드에서 공유할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> StatefulSet\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> sample<span class=\"token punctuation\">-</span>statefulset\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">serviceName</span><span class=\"token punctuation\">:</span> sample<span class=\"token punctuation\">-</span>statefulset\n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> sample<span class=\"token punctuation\">-</span>app\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> sample<span class=\"token punctuation\">-</span>app\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>container\n          <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span><span class=\"token number\">1.16</span>\n          <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n          <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> www\n            <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /usr/share/nginx/html\n  <span class=\"token key atrule\">volumeClaimTemplates</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> www\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">accessModes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ReadWriteOnce\n      <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">requests</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span> 1G</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token comment\"># 스페이풀셋 생성</span>\n$ kubectl apply <span class=\"token parameter variable\">-f</span> sample-statefulset.yaml\nstatefulset.apps/sample-statefulset created\n\n<span class=\"token comment\"># 스페이풀셋  확인</span>\n$ kubectl get statefulsets\nNAME                 READY   AGE\nsample-statefulset   <span class=\"token number\">3</span>/3     19s\n\n<span class=\"token comment\"># 파드 목룍 표시</span>\n$ kubectl get pods <span class=\"token parameter variable\">-o</span> wide\nNAME                                 READY   STATUS    RESTARTS        AGE    IP            NODE                   NOMINATED NODE   READINESS GATES\nsample-statefulset-0                 <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               42s    <span class=\"token number\">10.244</span>.3.16   kind-cluster-worker    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nsample-statefulset-1                 <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               37s    <span class=\"token number\">10.244</span>.2.16   kind-cluster-worker3   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nsample-statefulset-2                 <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               32s    <span class=\"token number\">10.244</span>.1.16   kind-cluster-worker2   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\n\n<span class=\"token comment\"># 스테이트풀셋에서 사용되고 있는 영구 볼륨 클레임 확인</span>\n$ kubectl get persistentvolumeClaims\nNAME                       STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE\nwww-sample-statefulset-0   Bound    pvc-50b61905-ce6a-4202-a7a1-cb8ac4c1be8b   1G         RWO            standard       104s\nwww-sample-statefulset-1   Bound    pvc-f4c76eb2-60eb-489f-8941-bada92a9cc19   1G         RWO            standard       99s\nwww-sample-statefulset-2   Bound    pvc-4672715a-7451-4338-ac29-6031609c6254   1G         RWO            standard       94s\n\n<span class=\"token comment\"># 스테이트풀셋에서 사용되고 있는 영구 볼륨 확인</span>\n$ kubectl get persistentvolume\nNAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                              STORAGECLASS   REASON   AGE\npvc-4672715a-7451-4338-ac29-6031609c6254   1G         RWO            Delete           Bound    default/www-sample-statefulset-2   standard                2m3s\npvc-50b61905-ce6a-4202-a7a1-cb8ac4c1be8b   1G         RWO            Delete           Bound    default/www-sample-statefulset-0   standard                2m12s\npvc-f4c76eb2-60eb-489f-8941-bada92a9cc19   1G         RWO            Delete           Bound    default/www-sample-statefulset-1   standard                2m8s</code></pre></div>\n<h2>5.6.2 스테이트풀셋 스케일링</h2>\n<p>스테이트풀셋도 레플리카셋, 디플로이먼트와 같은 방법인 <code class=\"language-text\">kubectl apply -f</code> 또는 <code class=\"language-text\">kubectl scale</code>을 사용하여 스케일링할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token comment\"># 레플리카 수를 3에서 4로 변경한 매니페스트를 apply</span>\n$ <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">'s|replicas: 3|replicas: 4|'</span> sample-statefulset.yaml\n\n$ kubectl apply <span class=\"token parameter variable\">-f</span> sample-statefulset.yaml\nstatefulset.apps/sample-statefulset configured\n\n$ kubectl get pods <span class=\"token parameter variable\">-o</span> wide\nNAME                                 READY   STATUS    RESTARTS        AGE     IP            NODE                   NOMINATED NODE   READINESS GATES\nsample-statefulset-0                 <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               4m48s   <span class=\"token number\">10.244</span>.3.16   kind-cluster-worker    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nsample-statefulset-1                 <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               4m43s   <span class=\"token number\">10.244</span>.2.16   kind-cluster-worker3   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nsample-statefulset-2                 <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               4m38s   <span class=\"token number\">10.244</span>.1.16   kind-cluster-worker2   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nsample-statefulset-3                 <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               18s     <span class=\"token number\">10.244</span>.3.18   kind-cluster-worker    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\n\n$ kubectl scale statefulsets sample-statefulset <span class=\"token parameter variable\">--replicas</span><span class=\"token operator\">=</span><span class=\"token number\">5</span>\nstatefulset.apps/sample-statefulset scaled\n\n$ kubectl get pods <span class=\"token parameter variable\">-o</span> wide\nNAME                                 READY   STATUS    RESTARTS        AGE     IP            NODE                   NOMINATED NODE   READINESS GATES\nsample-statefulset-0                 <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               5m25s   <span class=\"token number\">10.244</span>.3.16   kind-cluster-worker    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nsample-statefulset-1                 <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               5m20s   <span class=\"token number\">10.244</span>.2.16   kind-cluster-worker3   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nsample-statefulset-2                 <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               5m15s   <span class=\"token number\">10.244</span>.1.16   kind-cluster-worker2   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nsample-statefulset-3                 <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               55s     <span class=\"token number\">10.244</span>.3.18   kind-cluster-worker    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nsample-statefulset-4                 <span class=\"token number\">0</span>/1     Pending   <span class=\"token number\">0</span>               1s      <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>        <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>                 <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span></code></pre></div>\n<p>스테이트풀셋에서 레플리카 수를 변경하여 파드를 생허아고 삭제하면 레플리카셋이나 데몬셋 등과 달리 기본적으로 파드를 동시에 하나씩만 생성하고 삭제하기 때문에 조금 시간이 더 걸린다. 스케일 아웃일 때는 인덱스가 가장 작은 것부터 파드를 하나씩 생성하고 이전에 생성된 파드가 Ready 상태가 되고 나서 다음 파드를 생성하기 시작한다. 반대로 스케일 인일 때는 인덱스가 가장 큰 파드부터 순서대로 삭제된다. 레플리카셋의 경우 파드가 무작위로 삭제되기 때문에 특정 파드가 마스터가 되는 애플리케이션에는 맞지 않는다. 그러나 스테이트풀셋은 0번째 파드가 항상 먼저 생성되고 가장 마지막에 삭제되므로, 0번째 파드를 마스터 노드로 사용하는 이중화 구조 애플리케이션에 적합하다.</p>\n<h2>5.6.4 스테이트풀셋 업데이트 전략</h2>\n<p>스테이트풀셋에서도 두 가지 업데이트 전략을 사용한다. <code class=\"language-text\">OnDelete</code>, <code class=\"language-text\">RollingUpdate</code>가 그러한데 <code class=\"language-text\">RollingUpdate</code>가 기본적으로 지정된다. <code class=\"language-text\">OnDelete</code>는 데몬셋과 거의 동일하여 <code class=\"language-text\">RollingUpdate</code>에 대해서만 살펴보겠다.</p>\n<h3>RollingUpdate</h3>\n<p>디플로이먼트의 <code class=\"language-text\">RollingUpdate</code>와 다르게, 스테이트풀셋에서는 추가 파드를 생성하여 업데이트할 수 없다. 또한, 동시에 정지 가능한 최대 파드 수(<code class=\"language-text\">maxUnavailable</code>)를 지정하여 롤링 업데이트를 할 수도 없으므로, 파드마다 Ready 상태인지를 확인하고 업데이트를 하게 된다. <code class=\"language-text\">spec.podManagementPolicy</code>가 <code class=\"language-text\">Parallel</code>로 설정되어 있는 경우에도 병렬로 동시에 처리되지 않고 파드가 하나씩 업데이트된다.</p>\n<p>스테이트풀셋의 <code class=\"language-text\">RollingUpdate</code>에서는 <code class=\"language-text\">partition</code>이라는 특정 값을 설정할 수 있다. <code class=\"language-text\">partition</code>을 설정하면 전체 파드 중 어떤 파드까지 업데이트할지를 지정할 수 있다. 이 설정을 사용하면 전체에 영향을 주지 않고 부분적으로 업데이트를 적용하고 확인할 수 있어 안전한 업데이트를 할 수 있다. 또한, <code class=\"language-text\">Ondelete</code>오ㅘ 달리 수동으로 재기동한 경우에도 <code class=\"language-text\">partition</code>보다 작은 인덱스를 가진 파드는 업데이트되지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> StatefulSet\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> sample<span class=\"token punctuation\">-</span>statefulset<span class=\"token punctuation\">-</span>rollingupdate\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">updateStrategy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> RollingUpdate\n    <span class=\"token key atrule\">rollingUpdate</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">partition</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n  <span class=\"token key atrule\">serviceName</span><span class=\"token punctuation\">:</span> sample<span class=\"token punctuation\">-</span>statefulset<span class=\"token punctuation\">-</span>rollingupdate\n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> sample<span class=\"token punctuation\">-</span>app\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> sample<span class=\"token punctuation\">-</span>app\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>container\n          <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span><span class=\"token number\">1.16</span></code></pre></div>\n<p>위의 스테이트풀셋을 기동하보면 0~4 인덱스를 가진 다섯 개의 파드가 생성된다. 이 상태에서 스테이트풀셋 이미지를 수정하면 <code class=\"language-text\">partition=3</code>(위에서부터 세 개의 파드는 업데이트 대상 외)이기 때문에 인덱스 4와 인덱스 3인 파드만 업데이트된다.</p>\n<h2>5.6.5 영구 볼륨 데이터 저장 확인</h2>\n<p>먼저 컨테이너 내부에 영구 볼륨이 마운트되어 있는지를 확인한다. 영구 볼륨을 사용하고 있을 경우 /dev/sdb 등의 별도 디스크(PV)가 마운트되어 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token comment\"># 영구 볼륨 마운트 확인</span>\n$ kubectl <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> sample-statefulset-0 -- <span class=\"token function\">df</span> <span class=\"token parameter variable\">-h</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> /dev/sd\n/dev/sda1       95G   <span class=\"token number\">2</span>.7G          <span class=\"token number\">3</span>%  /etc/hosts\n/dev/sdb       976M   <span class=\"token number\">2</span>.6M          <span class=\"token number\">1</span>%  /usr/share/nginx/html\n\n<span class=\"token comment\"># 마운트된 영구 볼륨에 같은 이름의 파일이 없는지를 확인하고 샘플 파일 생성</span>\n$ kubectl <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> sample-statefulset-0 -- <span class=\"token function\">ls</span> /usr/share/nginx/html/sample.html\nls: cannot access <span class=\"token string\">'/usr/share/nginx/html/sample.html'</span><span class=\"token builtin class-name\">:</span> No such <span class=\"token function\">file</span> or directory\n<span class=\"token builtin class-name\">command</span> terminated with <span class=\"token builtin class-name\">exit</span> code <span class=\"token number\">2</span>\n\n<span class=\"token comment\"># 영구 볼륨에 sample.html 생성</span>\n$ kubectl <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> sample-statefulset-0 -- <span class=\"token function\">touch</span> /usr/share/nginx/html/sample.html\n\n<span class=\"token comment\"># 생성된 파일 확인</span>\n$ kubectl <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> sample-statefulset-0 -- <span class=\"token function\">ls</span> /usr/share/nginx/html/sample.html\n/usr/share/nginx/html/sample.html\n\n<span class=\"token comment\"># 예상치 못한 파드 정지 1 (파드 삭제)</span>\n$ kubectl delete pod sample-statefulset-0\npod <span class=\"token string\">\"sample-statefulset-0\"</span> deleted\n\n<span class=\"token comment\"># 예상치 못한 파드 정지2 (nginx 프로세스 정지)</span>\n$ kubectl <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> sample-statefulset-0 -- /bin/bash <span class=\"token parameter variable\">-c</span> <span class=\"token string\">'kill 1'</span>\n\n<span class=\"token comment\"># 파드 정지, 복구 이후에도 파일 유실 없음</span>\n$ kubectl <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> sample-statefulset-0 -- <span class=\"token function\">ls</span> /usr/share/nginx/html/sample.html\n/usr/share/nginx/html/sample.html</code></pre></div>\n<p>복구 후 스테이트풀셋 상태를 확인해보면 IP 주소는 변경되었지만, 파드명은 그대로인 것을 알 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token comment\"># 파드 목록 표시</span>\n$ kubectl get pods <span class=\"token parameter variable\">-o</span> wide\nNAME                                 READY   STATUS    RESTARTS       AGE    IP            NODE                   NOMINATED NODE   READINESS GATES\nsample-statefulset-0                 <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">1</span> <span class=\"token punctuation\">(</span>83s ago<span class=\"token punctuation\">)</span>    112s   <span class=\"token number\">10.244</span>.3.19   kind-cluster-worker    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nsample-statefulset-1                 <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>              27m    <span class=\"token number\">10.244</span>.2.16   kind-cluster-worker3   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nsample-statefulset-2                 <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>              27m    <span class=\"token number\">10.244</span>.1.16   kind-cluster-worker2   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span></code></pre></div>\n<h2>5.6.6 스테이트풀셋 삭제와 영구 볼륨 삭제</h2>\n<p>스테이트풀셋에서 지정한 영구 볼륨은 별도로 해제하기 전에는 스테이트풀셋이 삭제되어도 해제되지 않는다. 스테이트풀셋이 영구 볼륨을 해제하기 전에 볼륨에서 데이터를 백업할 수 있도록 시간을 주기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token comment\"># 스테이트풀셋 삭제</span>\n$ kubectl delete statefulset sample-statefulset\nstatefulset.apps <span class=\"token string\">\"sample-statefulset\"</span> deleted\n\n<span class=\"token comment\"># 스테이트풀셋과 연결되는 영구 볼륨 클레임 확인</span>\n$ kubectl get persistentvolumeclaims\nNAME                       STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE\nwww-sample-statefulset-0   Bound    pvc-50b61905-ce6a-4202-a7a1-cb8ac4c1be8b   1G         RWO            standard       30m\nwww-sample-statefulset-1   Bound    pvc-f4c76eb2-60eb-489f-8941-bada92a9cc19   1G         RWO            standard       30m\nwww-sample-statefulset-2   Bound    pvc-4672715a-7451-4338-ac29-6031609c6254   1G         RWO            standard       30m\nwww-sample-statefulset-3   Bound    pvc-fc2f7918-bd66-4c39-baa3-8d2ccca53a6e   1G         RWO            standard       26m\nwww-sample-statefulset-4   Bound    pvc-7ee68d8a-c3c4-4053-9cd4-608021b9d5e7   1G         RWO            standard       25m\n\n<span class=\"token comment\"># 스테이트풀셋에 연결되는 영구 볼륨 확인</span>\n$ kubectl get persistentvolumes\nNAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                              STORAGECLASS   REASON   AGE\npvc-4672715a-7451-4338-ac29-6031609c6254   1G         RWO            Delete           Bound    default/www-sample-statefulset-2   standard                31m\npvc-50b61905-ce6a-4202-a7a1-cb8ac4c1be8b   1G         RWO            Delete           Bound    default/www-sample-statefulset-0   standard                31m\npvc-7ee68d8a-c3c4-4053-9cd4-608021b9d5e7   1G         RWO            Delete           Bound    default/www-sample-statefulset-4   standard                25m\npvc-f4c76eb2-60eb-489f-8941-bada92a9cc19   1G         RWO            Delete           Bound    default/www-sample-statefulset-1   standard                31m\npvc-fc2f7918-bd66-4c39-baa3-8d2ccca53a6e   1G         RWO            Delete           Bound    default/www-sample-statefulset-3   standard                26m\n\n<span class=\"token comment\"># 다시 스테이트풀셋 생성</span>\n$ kubectl apply <span class=\"token parameter variable\">-f</span> sample-statefulset.yaml\nstatefulset.apps/sample-statefulset created\n\n<span class=\"token comment\"># 스테이트풀셋을 한 번 삭제한 후에도 영구 볼륨에 sample.html이 있는지 확인</span>\nkubectl <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> sample-statefulset-0 -- <span class=\"token function\">ls</span> /usr/share/nginx/html/sample.html\n/usr/share/nginx/html/sample.html\n\n<span class=\"token comment\"># 영구 볼륨 삭제</span>\n$ kubectl delete persistentvolumeclaims www-sample-statefulset-<span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\npersistentvolumeclaim <span class=\"token string\">\"www-sample-statefulset-0\"</span> deleted\npersistentvolumeclaim <span class=\"token string\">\"www-sample-statefulset-1\"</span> deleted\npersistentvolumeclaim <span class=\"token string\">\"www-sample-statefulset-2\"</span> deleted\npersistentvolumeclaim <span class=\"token string\">\"www-sample-statefulset-3\"</span> deleted\n\n<span class=\"token comment\"># 영구 볼륨 클레임, 영구 볼륨 삭제 확인</span>\n$ kubectl get persistentvolumeclaims\nNo resources found <span class=\"token keyword\">in</span> default namespace.\n\n$ kubectl get persistentvolume\nNo resources found</code></pre></div>","frontmatter":{"title":"[쿠버네티스 완벽 가이드] 10. 워크로드 API 카테고리 (4) - 데몬셋, 스테이트풀셋","date":"August 28, 2022","description":null}},"previous":{"fields":{"slug":"/linux/sed/"},"frontmatter":{"title":"[Linux] sed 명령어"}},"next":{"fields":{"slug":"/kubernetes/kubernetes_5_5/"},"frontmatter":{"title":"[쿠버네티스 완벽 가이드] 11. 워크로드 API 카테고리 (5) - 잡, 크론잡"}}},"pageContext":{"id":"5aa500d8-a92d-5f0f-8ba5-0e20fecdaf74","previousPostId":"e080223f-e695-5ef7-8ee4-8fd1d1dc612b","nextPostId":"98189014-976e-5265-879e-9ee2a2b1a809"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}