{"componentChunkName":"component---src-templates-blog-post-js","path":"/kafka/kafka_5_2/","result":{"data":{"site":{"siteMetadata":{"title":"Devlog"}},"markdownRemark":{"id":"d7d5a889-f926-56ed-8a1c-b5c4321d587b","excerpt":"5-2-1) java를 이용한 프로듀서 애플리케이션 개발  을 통해 프로듀서의 필수 설정(bootstrap_servers)을 설정한다.  객체 생성 후  함수를 통해 record를 프로듀스 할 수 있다.  함수는 배치를 강제로 전송하는 함수이고, 는 프로듀서와의 연결을 종료한다. 5-…","html":"<h2>5-2-1) java를 이용한 프로듀서 애플리케이션 개발</h2>\n<div class=\"gatsby-highlight\" data-language=\"gradle\"><pre class=\"language-gradle\"><code class=\"language-gradle\"><span class=\"token keyword\">plugins</span> <span class=\"token punctuation\">{</span>  \n    id <span class=\"token string\">'java'</span>  \n<span class=\"token punctuation\">}</span>  \n  \ngroup <span class=\"token string\">'com.example'</span>  \nversion <span class=\"token string\">'1.0'</span>  \n  \nsourceCompatibility <span class=\"token operator\">=</span> <span class=\"token number\">1.8</span>  \ntargetCompatibility <span class=\"token operator\">=</span> <span class=\"token number\">1.8</span>  \n  \n<span class=\"token keyword\">repositories</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token function\">mavenCentral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">}</span>  \n  \n<span class=\"token keyword\">dependencies</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">implementation</span> <span class=\"token string\">'org.apache.kafka:kafka-clients:3.9.0'</span>  \n    <span class=\"token keyword\">implementation</span>  <span class=\"token string\">'org.slf4j:slf4j-simple:1.7.36'</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example</span><span class=\"token punctuation\">;</span>  \n  \n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">KafkaProducer</span></span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ProducerConfig</span></span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ProducerRecord</span></span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>serialization<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringSerializer</span></span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Logger</span></span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LoggerFactory</span></span><span class=\"token punctuation\">;</span>  \n  \n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Properties</span></span><span class=\"token punctuation\">;</span>  \n  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleProducer</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SimpleProducer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">TOPIC_NAME</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">BOOTSTRAP_SERVERS</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"my-kafka:19092\"</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  \n        <span class=\"token class-name\">Properties</span> configs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        configs<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BOOTSTRAP_SERVERS_CONFIG</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">BOOTSTRAP_SERVERS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        configs<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span><span class=\"token constant\">KEY_SERIALIZER_CLASS_CONFIG</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StringSerializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        configs<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span><span class=\"token constant\">VALUE_SERIALIZER_CLASS_CONFIG</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StringSerializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n        <span class=\"token class-name\">KafkaProducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> producer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">KafkaProducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>configs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n        <span class=\"token class-name\">String</span> messageValue <span class=\"token operator\">=</span> <span class=\"token string\">\"testMessage\"</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">ProducerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> record <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProducerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">TOPIC_NAME</span><span class=\"token punctuation\">,</span> messageValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        producer<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        producer<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        producer<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">ProducerConfig</code> 을 통해 프로듀서의 필수 설정(bootstrap_servers)을 설정한다.</li>\n<li><code class=\"language-text\">KafkaProducer&lt;></code> 객체 생성 후 <code class=\"language-text\">send()</code> 함수를 통해 record를 프로듀스 할 수 있다. <code class=\"language-text\">flush()</code> 함수는 배치를 강제로 전송하는 함수이고, <code class=\"language-text\">close()</code>는 프로듀서와의 연결을 종료한다.</li>\n</ul>\n</br>\n<h2>5-2-2) 메시지 키가 존재하는 레코드 프로듀스</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">KafkaProducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> producer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">KafkaProducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>configs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n<span class=\"token class-name\">ProducerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> record <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProducerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">TOPIC_NAME</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Pangyo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Pangyo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nproducer<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token class-name\">ProducerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> record2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProducerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">TOPIC_NAME</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Busan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Busan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nproducer<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>record2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nproducer<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nproducer<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n</br>\n<ul>\n<li><code class=\"language-text\">ProducerRecord&lt;></code>를 통해 레코드 생성 시 파라미터를 3개 넣으면 키를 부여할 수 있다.</li>\n</ul>\n<h2>5-2-3) 레코드에 파티션 번호를 지정하여 전송하는 프로듀서</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">KafkaProducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> producer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">KafkaProducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>configs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\n<span class=\"token keyword\">int</span> partitionNo <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  \n<span class=\"token class-name\">ProducerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> record <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProducerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">TOPIC_NAME</span><span class=\"token punctuation\">,</span> partitionNo<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Pangyo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Pangyo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nproducer<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nproducer<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nproducer<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>파티션을 지정해서 보내고 싶다면, <code class=\"language-text\">ProducerRecord&lt;></code>를 통해 레코드 생성 시 토픽명, 파티션 번호, 키, 값 순서대로 넣어서 생성하면 된다.</li>\n</ul>\n</br>\n<h2>5-2-4) 커스텀 파티셔너를 가지는 프로듀서</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example</span><span class=\"token punctuation\">;</span>  \n  \n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Partitioner</span></span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Cluster</span></span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvalidRecordException</span></span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PartitionInfo</span></span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Utils</span></span><span class=\"token punctuation\">;</span>  \n  \n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span></span><span class=\"token punctuation\">;</span>  \n  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomPartitioner</span>  <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Partitioner</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token annotation punctuation\">@Override</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> topic<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> keyBytes<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> valueBytes<span class=\"token punctuation\">,</span>  \n                         <span class=\"token class-name\">Cluster</span> cluster<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>keyBytes <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidRecordException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Need message key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n\n\t\t<span class=\"token comment\">// Pangyo 키를 가지면 파티션을 0으로 보냄</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pangyo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  \n\n\t\t<span class=\"token comment\">// 그 외에는 해시 값대로 전송</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PartitionInfo</span><span class=\"token punctuation\">></span></span> partitions <span class=\"token operator\">=</span> cluster<span class=\"token punctuation\">.</span><span class=\"token function\">partitionsForTopic</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">int</span> numPartitions <span class=\"token operator\">=</span> partitions<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Utils</span><span class=\"token punctuation\">.</span><span class=\"token function\">toPositive</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Utils</span><span class=\"token punctuation\">.</span><span class=\"token function\">murmur2</span><span class=\"token punctuation\">(</span>keyBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> numPartitions<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n  \n    <span class=\"token annotation punctuation\">@Override</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> configs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  \n  \n    <span class=\"token annotation punctuation\">@Override</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token class-name\">Properties</span> configs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    configs<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BOOTSTRAP_SERVERS_CONFIG</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">BOOTSTRAP_SERVERS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    configs<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span><span class=\"token constant\">KEY_SERIALIZER_CLASS_CONFIG</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StringSerializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    configs<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span><span class=\"token constant\">VALUE_SERIALIZER_CLASS_CONFIG</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StringSerializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    configs<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PARTITIONER_CLASS_CONFIG</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CustomPartitioner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token class-name\">KafkaProducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> producer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">KafkaProducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>configs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token class-name\">ProducerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> record <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProducerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">TOPIC_NAME</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Pangyo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Pangyo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    producer<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    producer<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    producer<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>프로듀서 사용 환경에 따라 특정 데이터를 가지는 레코드를 특정 파티션에만 프로듀스해야할 필요가 있다. 이런 경우를 위해 커스텀 파티셔너를 설정할 수 있다. <code class=\"language-text\">PARTITIONER_CLASS_CONFIG</code> 설정에 특정 파티셔너 클래스를 지정함으로써 설정 가능하다.</li>\n</ul>\n</br>\n<h2>5-2-5) 레코드 전송 결과를 확인하는 프로듀서 애플리케이션</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token class-name\">Properties</span> configs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    configs<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BOOTSTRAP_SERVERS_CONFIG</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">BOOTSTRAP_SERVERS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    configs<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span><span class=\"token constant\">KEY_SERIALIZER_CLASS_CONFIG</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StringSerializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    configs<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span><span class=\"token constant\">VALUE_SERIALIZER_CLASS_CONFIG</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StringSerializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token comment\">//configs.put(ProducerConfig.ACKS_CONFIG, \"0\");  </span>\n  \n    <span class=\"token class-name\">KafkaProducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> producer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">KafkaProducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>configs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token class-name\">ProducerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> record <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProducerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">TOPIC_NAME</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Pangyo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Pangyo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token class-name\">RecordMetadata</span> metadata <span class=\"token operator\">=</span> producer<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>metadata<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>  \n        producer<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        producer<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>KafkaProducer의 <code class=\"language-text\">send()</code> 메소드는 <code class=\"language-text\">Future</code> 객체를 반환한다. 이 객체는 <code class=\"language-text\">RecordMetadata</code>의 비동기 결과를 표현한 것으로, ProducerRecord가 카프카 브로커에 정상적으로 적재되었는지에 대한 데이터가 포함되어 있다. 위와 같이 <code class=\"language-text\">get()</code>메서드를 사용하면, 프로듀서에서 보낸 데이터의 결과를 동기적으로 가져올 수 있다.</p>\n</li>\n<li>\n<p>위 소스 코드를 실행하면 다음과 같은 RecordMetadata의 로그를 확인할 수 있다. test 토픽의 0번 파티션으로 전송하였고, 4번 offset으로 저장되었다는 의미이다. 이는 <code class=\"language-text\">acks=1</code>로 설정되어 리더 파티션의 결과까지 기다리기 때문에 확인 가능하다. 만약, <code class=\"language-text\">acks=0</code>으로 설정된다면, 오프셋 값이 -1과 같이 의미 없는 값으로 표출된다.</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[main] INFO com.example.ProducerWithSyncCallback - test-0@4</code></pre></div>\n</br>\n<h2>5-2-6) 프로듀서 애플리케이션의 안전한 종료</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">producer<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>프로듀서를 안전하게 종료하기 위해서는 꼭 <code class=\"language-text\">close()</code> 메소드를 사용하여 Accumulator에 남아 있는 레코드를 카프카 클러스터로 전송하면서 종료하는 것이 좋다.</li>\n</ul>","frontmatter":{"title":"5-2) 프로듀서 애플리케이션 개발","date":"January 11, 2024","description":null}},"previous":{"fields":{"slug":"/flutter/flutter_3/"},"frontmatter":{"title":"[Flutter] 03. Consumer, ProviderNotFoundException, Selector"}},"next":{"fields":{"slug":"/kafka/kafka_6_1/"},"frontmatter":{"title":"6-1) 컨슈머"}}},"pageContext":{"id":"d7d5a889-f926-56ed-8a1c-b5c4321d587b","previousPostId":"b6a414c7-c02c-5a67-bfc1-c8fea9497f14","nextPostId":"873fc8ac-be5b-5f87-85d5-379c857ffbde"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}