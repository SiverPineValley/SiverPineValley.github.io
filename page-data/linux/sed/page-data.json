{"componentChunkName":"component---src-templates-blog-post-js","path":"/linux/sed/","result":{"data":{"site":{"siteMetadata":{"title":"Devlog"}},"markdownRemark":{"id":"e080223f-e695-5ef7-8ee4-8fd1d1dc612b","excerpt":"리눅스 서버에서 작업하다보면 특정 문서를 수정할 일이 생기게 된다. 보통 문서 전체를 수정하기보다는 특정 설정 값을 하나씩 설정하게 되는데 파일이 하나라면 vi 편집기로 수정이 가능하나, 파일이 여러 개인 경우, 한 파일 내에서 공통적으로 수정할 부분이 여러 군데인 경우 vi…","html":"<p>리눅스 서버에서 작업하다보면 특정 문서를 수정할 일이 생기게 된다. 보통 문서 전체를 수정하기보다는 특정 설정 값을 하나씩 설정하게 되는데 파일이 하나라면 vi 편집기로 수정이 가능하나, 파일이 여러 개인 경우, 한 파일 내에서 공통적으로 수정할 부분이 여러 군데인 경우 vi 편집기를 통한 수정은 번거로울 수 있다. 이럴 때 sed 명령어를 사용하면 쉽게 편집이 가능하다. 사용 방법을 하나씩 파악해보자.</p>\n<div align=\"left\">\n<img src=\"./images/sed.png\" width=\"500px\" />\n</div>\n<p>sed 명령어에는 내부적으로 두 개의 워크 스페이스를 사용한다. 이 두 버퍼는 각각 패턴 스페이스(패턴 버퍼), 홀드 스페이스(홀드 버퍼)라고 한다. 패턴 스페이스는 라인 단위로 읽을 때 읽힌 라인이 임시로 저장되는 버퍼이다. sed 명령어로 출력할 때, 이 버퍼의 내용을 출력하게 되는데 실제로 sed 명령어로 뭔가 조작을 하더라도 원본이 바로 수정되는 것이 아니라, 이 버퍼의 내용이 수정된다. 홀드 스페이스는 좀 더 길게 가지고 있는 저장소로, 읽어 온 여러 행을 저장한다. 즉, 어떤 내용을 홀드 스페이스에 저장하면, sed가 다음 행을 읽더라도 나중에 내가 원할 때 불러와서 재사용할 수 있다.</p>\n<p>본격적으로 내용을 확인하기 전에, 예시 파일을 생성하였다. 파일 명은 <code class=\"language-text\">example</code>로 지정하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token comment\"># 예시 파일 내용</span>\none\ntwo\nthree\nfour\nfive\nsix\nseven\neight\nnine\nten\n</code></pre></div>\n<h2>1) 특정 범위 만큼 파일 내용 출력</h2>\n<p><code class=\"language-text\">-n</code>: 작업한 부분만 출력하기 위한 옵션</br>\n<code class=\"language-text\">-e</code>: 여러 조건을 사용하여 출력</br>\n<code class=\"language-text\">p</code>: 패턴에 따라 찾은 라인을 출력하는 플래그</br>\n<code class=\"language-text\">,</code>: 범위를 지정하기 위한 플래그</br>\n<code class=\"language-text\">^</code>: 시작 플래그</br>\n<code class=\"language-text\">$</code>: 끝 플래그</br></p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token comment\"># 첫 번째 행만 출력</span>\n$ <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'1p'</span> example\none\n\n<span class=\"token comment\"># -n 옵션 없이 첫 번째 행 출력</span>\n$ <span class=\"token function\">sed</span> <span class=\"token string\">'1p'</span> example\none\none\ntwo\nthree\nfour\nfive\nsix\nseven\neight\nnine\nten\n\n\n<span class=\"token comment\"># 네 번째 행부터 여섯 번째 행까지 출력</span>\n$ <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'4,6p'</span> example\nfour\nfive\nsix\n\n<span class=\"token comment\"># 일곱 번째 행부터 마지막까지 출력</span>\n$ <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'7,$p'</span> example\nseven\neight\nnine\nten\n\n\n<span class=\"token comment\"># -e 조건을 사용하여 여러 조건 출력</span>\n$ <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">'1p'</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">'3,5p'</span> example\none\nthree\nfour\nfive</code></pre></div>\n<h2>2) 특정 라인 제거</h2>\n<p><code class=\"language-text\">/</code>: / 사이에 있는 글자</br>\n<code class=\"language-text\">d</code>: 삭제 플래그</br></p>\n<p>sed 명령어는 수정한 작업에 대해 원래을 파일을 건드리지 않는다. 이를 적용시키기 위해서는 stdout 버퍼로 별도 파일로 저장하거나 <code class=\"language-text\">-i</code> 옵션을 붙여줘야 한다. 이 때 BSD OS(Mac)의 경우 sed -i 옵션을 사용할 경우에는 제대로 적용되지 않는데, 리눅스에 보편적으로 설치되어 있는 GNU sed 와 다르기 때문이다. 이를 위해 <code class=\"language-text\">brew install gnu-sed</code>를 사용하여 <code class=\"language-text\">gsed</code> 명령어로 대체할 수 있다. sed 명령어에서도 <code class=\"language-text\">-i -e</code>로 적용 가능하긴 하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token comment\"># 빈 라인 모두 제거</span>\n$ <span class=\"token function\">sed</span> <span class=\"token string\">'/^$/d'</span> example\none\ntwo\nthree\nfour\nfive\nsix\nseven\neight\nnine\nten\n\n<span class=\"token comment\"># 빈 라인 제거해서 새로울 파일에 저장</span>\n$ <span class=\"token function\">sed</span> <span class=\"token string\">'/^$/d'</span> example <span class=\"token operator\">></span> example_new\n$ <span class=\"token function\">cat</span> example_new\none\ntwo\nthree\nfour\nfive\nsix\nseven\neight\nnine\nten\n\n<span class=\"token comment\"># 빈 라인 제거해서 원본 파일에 적용</span>\n$ <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">'/^$/d'</span> example\n$ <span class=\"token function\">cat</span> example\none\ntwo\nthree\nfour\nfive\nsix\nseven\neight\nnine\nten</code></pre></div>\n<h2>3) 치환</h2>\n<p><code class=\"language-text\">s</code>: switch의 약자로, 치환할 때 사용하는 플래그</br>\n<code class=\"language-text\">g</code>: 치환할 부분을 문서 전체에서 찾을 때 사용하는 플래그</br>\n<code class=\"language-text\">i</code>: 변경 대상을 찾을 때 대소문자를 무시</br></p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">'s/five/fives/g'</span> example\n$ <span class=\"token function\">cat</span> example\none\ntwo\nthree\nfour\nfives\nsix\nseven\neight\nnine\nten\n\n$ <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">'s/fives/FIVES/g'</span> example\n$ <span class=\"token function\">cat</span> example\none\ntwo\nthree\nfour\nFIVES\nsix\nseven\neight\nnine\nten\n\n$ <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">'s/fives/five/gi'</span> example\n$ <span class=\"token function\">cat</span> example\none\ntwo\nthree\nfour\nfive\nsix\nseven\neight\nnine\nten\n\n<span class=\"token comment\"># 특정 라인만 변경</span>\n$ <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">'3 s/three/throw/g'</span> example\n$ <span class=\"token function\">cat</span> example\none\ntwo\nthrow\nfour\nfives\nsix\nseven\neight\nnine\nten</code></pre></div>\n<h2>4) 그 외의 플래그</h2>\n<table>\n<thead>\n<tr>\n<th>옵션</th>\n<th>의미</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-n, --quiet</td>\n<td>패턴 스페이스에 있는 내용들을 자동으로 출력하지 않음</td>\n</tr>\n<tr>\n<td>-e script, --expression script</td>\n<td>실행할 스크립트 지정</td>\n</tr>\n<tr>\n<td>-f script-file, --file script-file</td>\n<td>실행할 스크립트 파일 지정</td>\n</tr>\n<tr>\n<td>-i, --in-place</td>\n<td>변경된 내용 파일에 저장</td>\n</tr>\n<tr>\n<td>-E, -r, --regex-extended</td>\n<td>확장 정규식 패턴 사용</td>\n</tr>\n</tbody>\n</table>\n<h2>출처</h2>\n<p><a href=\"https://jhnyang.tistory.com/287\">https://jhnyang.tistory.com/287</a></br>\n<a href=\"https://etloveguitar.tistory.com/47\">https://etloveguitar.tistory.com/47</a></p>","frontmatter":{"title":"[Linux] sed 명령어","date":"August 28, 2022","description":null}},"previous":{"fields":{"slug":"/kubernetes/kubernetes_5_3/"},"frontmatter":{"title":"[쿠버네티스 완벽 가이드] 09. 워크로드 API 카테고리 (3) - 디플로이먼트"}},"next":{"fields":{"slug":"/kubernetes/kubernetes_5_4/"},"frontmatter":{"title":"[쿠버네티스 완벽 가이드] 10. 워크로드 API 카테고리 (4) - 데몬셋, 스테이트풀셋"}}},"pageContext":{"id":"e080223f-e695-5ef7-8ee4-8fd1d1dc612b","previousPostId":"59e8bd7f-75e7-51fa-8f94-ab7d2b3289ab","nextPostId":"5aa500d8-a92d-5f0f-8ba5-0e20fecdaf74"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}